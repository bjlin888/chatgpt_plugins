// Create button with styles
const button = document.createElement('button');
button.textContent = 'Submit File';
button.style.backgroundColor = 'green';
button.style.color = 'white';
button.style.padding = '5px';
button.style.border = 'none';
button.style.borderRadius = '5px';
button.style.margin = '5px';

// Create progress element with styles
const progress = document.createElement('div');
progress.style.width = '99%';
progress.style.height = '5px';
progress.style.backgroundColor = 'grey';

// Create progress bar inside progress element with styles
const progressBar = document.createElement('div');
progressBar.style.width = '0%';
progressBar.style.height = '100%';
progressBar.style.backgroundColor = 'blue';

// Append button and progress elements before the target element
const targetElement = document.querySelector('.flex.flex-col.w-full.py-2.flex-grow.md\\:py-3.md\\:pl-4');
targetElement.parentNode.insertBefore(button, targetElement);
targetElement.parentNode.insertBefore(progress, targetElement);

// Button click event handler
button.addEventListener('click', () => {
  const fileInput = document.createElement('input');
  fileInput.type = 'file';
  fileInput.accept = '.txt,.js,.py,.html,.css,.json,.csv';

  // File input change event handler
  fileInput.addEventListener('change', async () => {
    const file = fileInput.files[0];
    const chunks = chunkFile(await readFileAsText(file));
    const numChunks = chunks.length;

    // Submit each chunk into a conversation
    for (let i = 0; i < numChunks; i++) {
      const chunk = chunks[i];
      await submitConversation(chunk, i + 1, file.name);
      progressBar.style.width = `${((i + 1) / numChunks) * 100}%`;
      
      // Check if chatgpt is ready
      let chatgptReady = false;
      while (!chatgptReady) {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        chatgptReady = !document.querySelector('.text-2xl > span:not(.invisible)');
      }
    }

    // Set progress bar to blue after all chunks are submitted
    progressBar.style.backgroundColor = 'blue';
  });

  fileInput.click(); // Trigger file input click
});

// Function to read file as text
function readFileAsText(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = reject;
    reader.readAsText(file);
  });
}

// Function to chunk file content
function chunkFile(content) {
  var chunks = [];
  var chunk = '';
  var chunkSize = 0;
  var chinesePunctuationMarks = /[！，。？；]/;
  var openCloseMarks = {
    '【': '】',
    '「': '」',
    '《': '》',
    '〈': '〉',
    '：': '',
    '‘': '’',
    '“': '”',
  };

  for (var i = 0; i < content.length; i++) {
    var char = content.charAt(i);
    chunk += char;
    chunkSize++;

    if (chunkSize > 700 || (chunkSize >= 500 && chinesePunctuationMarks.test(char))) {
      var lastChar = char;
      var lastOpenCloseMark = openCloseMarks[lastChar];

      if (lastOpenCloseMark && !chunk.includes(lastOpenCloseMark)) {
        continue;
      }

      chunks.push(chunk.trim());
      chunk = '';
      chunkSize = 0;
    }
  }

  if (chunk.length > 0) {
    chunks.push(chunk.trim());
  }

  return chunks;
}

// Function to submit conversation
async function submitConversation(text, part, filename) {
  const textarea = document.querySelector('textarea[tabindex="0"]');
  const enterKeyEvent = new KeyboardEvent('keydown', {
    bubbles: true,
    cancelable: true,
    keyCode: 13,
  });
  textarea.value = `Part ${part} of ${filename}:\n\n${text}`;
  textarea.dispatchEvent(enterKeyEvent);
}
